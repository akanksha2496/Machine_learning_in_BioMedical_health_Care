# -*- coding: utf-8 -*-
"""AkankshaDewangan_MT19049_hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w7q4VPC8--fO3z-Fngoc03GHICybmQmg
"""

# from google.colab import drive   #connect collab to drive
# drive.mount('/content/drive')    # mount drive

import sys

input1 = sys.argv[1]#Training_dataset.csv
input2= sys.argv[2]#New_Validation_Dataset.csv
input3 = sys.argv[3]#training_dipeptide_result.csv
input4= sys.argv[4]#testing_dipeptide_result.csv
output1 = sys.argv[5]#logistic.csv
##output2 = sys.argv[6]#svm.csv
output3 = sys.argv[7]#randomForest.csv
output4 = sys.argv[8]#extraTree.csv
output5 = sys.argv[9]#mlp.csv

import pandas as pd
import numpy as np 
import os 
# importing required modules 
from zipfile import ZipFile 
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df=pd.read_csv(input1)  #store train data in df 38910 row and 1 column

df2=pd.read_csv(input2) #store test data on df2 2000rows 1 column

train_y=df['Label']   #store label column in tarin_y
df=df.drop(['Label'],axis=1) #drop label columns

# df2

test_ID=df2['ID']   #take the column information of testid in test_ID and 
df2=df2.drop(['ID'],axis=1)   #drop the ID column from dataframe2 i.e df2

# df

df.to_csv (r'dna.csv', index = False,header=True)   #convert data into csv format so can futhur cahnge to some form

df2.to_csv (r'dna_test.csv', index = False,header=True) #convert whole dataset into dna_test formate do that we can change furthur from p-feature website.

train_X=pd.read_csv(input3)   #read finally ACC converted data as train data

train_X=train_X.drop(['ID','Label'],axis=1)   #drop ID column from train data:

# train_X

X_train, X_test, y_train, y_test = train_test_split(train_X, train_y, test_size=0.33, random_state=42) #test train split for testing on 66:33 train test ratio.

"""LOGISTIC REGRESSION:"""

print("LOGISTIC REGRESSION \n")

import numpy as np  #import numpy liberary for array fomrat

from sklearn.linear_model import LogisticRegression    #import logistic regression
clf = LogisticRegression(solver='liblinear',class_weight='balanced').fit(X_train, y_train)   #fit the split train test and predict the values.
y_pred=clf.predict(X_test)  #predicted the validation test split data

clf

# y_pred

print("Accurcay of validation data: ",accuracy_score(y_test,y_pred))

from sklearn.metrics import matthews_corrcoef

print("Mathew correlation : ",matthews_corrcoef(y_test, y_pred))

valid_X=pd.read_csv(input4)

valid_X=valid_X.drop(['ID'],axis=1)

valid_X

y_valid=clf.predict(valid_X)

data_res=pd.DataFrame()
data_res['ID']=test_ID
data_res['Label']=y_valid
#writing the dataframe on csv file
data_res.to_csv (r'logistic.csv', index = False,header=True)

data_res.to_csv(output1,index=False)

"""svm classifier:"""

#print("SVM classifier \n")

#import numpy as np
# from sklearn.pipeline import make_pipeline
# from sklearn.preprocessing import StandardScaler   #standard scalar tranformation
# from sklearn.multiclass import OneVsRestClassifier
# from sklearn.svm import SVC
#from sklearn import svm      
#clf =svm.SVC(kernel='linear')    #train the model with svm
#clf.fit(X_train, y_train)

#y_pred=clf.predict(X_test)
#print("accurcay for validation: ",accuracy_score(y_test,y_pred))

#from sklearn.metrics import matthews_corrcoef    #for finding mathew correlation over validation test train data
#print("Mathew correlation : ",matthews_corrcoef(y_test, y_pred))  #here evaluation

#y_valid=clf.predict(valid_X)    #prediction for the test data
#data_res=pd.DataFrame()         #dataframe formation for predictions
#data_res['ID']=test_ID           #put ID columns in datafrme
#data_res['Label']=y_valid         #put labels column in dataframe
#writing the dataframe on csv file
#data_res.to_csv (r'svm_default.csv', index = False,header=True)     #put svm csv prediction on svm_default file

#data_res.to_csv(output2,index=False)     #this will be the output

"""Random forest:"""

print("Random forest\n")

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(max_depth=150,n_estimators=500,n_jobs=-1,random_state=42)  #random forest classifier with varying parameter tunned
clf.fit(X_train, y_train) #train model with training data avalilable

# y_pred

y_pred=clf.predict(X_test)
print("Accurcaies of test data: ",accuracy_score(y_test,y_pred))

from sklearn.metrics import matthews_corrcoef
print("Mathew correlation : ",matthews_corrcoef(y_test, y_pred))

y_valid=clf.predict(valid_X)
data_res=pd.DataFrame()
data_res['ID']=test_ID
data_res['Label']=y_valid
#writing the dataframe on csv file
data_res.to_csv (r'random_forest.csv', index = False,header=True)  # 32.65, 150 estimator ==rf_dep_500_estimator_1000.csv 34.4
#dipeptide RandomForestClassifier(max_depth=150,n_estimators=500,n_jobs=-1,random_state=42) 84% acc, mathew corr 69.2%, rfc_dipeptide_estimator_500.csv
#

data_res.to_csv(output3,index=False)

"""extra tree classifier:"""

print("extra tree classifier \n")

from sklearn.ensemble import ExtraTreesClassifier    #extratree classifier
clf = ExtraTreesClassifier(n_estimators=500,random_state=0,warm_start=True)  #train the extratree classifier model with varying parametrer tunned
clf.fit(X_train, y_train)  #train the model of extratree classifier

y_pred=clf.predict(X_test)   #predict the validation test data values
print("Accurcay of the test data: ",accuracy_score(y_test,y_pred))  #look foe accurcay

from sklearn.metrics import matthews_corrcoef
print("Mathew correlation : ",matthews_corrcoef(y_test, y_pred))  #MCC value calculation

y_valid=clf.predict(valid_X)    #predict for original test data
data_res=pd.DataFrame()     #form data frame
data_res['ID']=test_ID      #put ID column of test data into datafarme
data_res['Label']=y_valid    #put predicted labels here
#writing the dataframe on csv file
data_res.to_csv (r'extratree_classifier', index = False,header=True)   #put all prediction in csv file
# data_res.to_csv (r'extratree_etimator_dipeptide_estimatAlldata.csv', index = False,header=True) # ExtraTreesClassifier(n_estimators=500,random_state=0,warm_start=True)  48.060
# data_res.to_csv (r'extratree_etimator_dipeptide_estimator500randomstate0.csv', index = False,header=True)  #36.65 estimator 150 #36.580  estimator 200 #1000 estimator, 38.186 
# ExtraTreesClassifier(n_estimators=500, random_state=0,warm_start=True)  86% accuracy, 72.4 mathew, 47.33 leader board
#ExtraTreesClassifier(n_estimators=700, random_state=0,warm_start=True)  86.25% accuracy, 72.51 mathew,  leader board 47.129
#ExtraTreesClassifier(n_estimators=500,max_depth=320)  accuracy=     ,mathew=     ,leaderboard=

data_res.to_csv(output4,index=False)  #ouput csv file after transformation.

"""MLP:"""

print("MultiLayer classifier (MLP)")

from sklearn.neural_network import MLPClassifier    #MLP classifier of neural network is used
clf = MLPClassifier(solver='sgd', alpha=1e-50,hidden_layer_sizes=(70, 2), random_state=0) #hving parameters 70 hidden layes and 2 input output.
clf.fit(X_train, y_train)   #fit the train data to mlp model

y_pred=clf.predict(X_test)
print("Accuracies of test data with MLP: ",accuracy_score(y_test,y_pred))   #predict and caluculate the accurcaies

from sklearn.metrics import matthews_corrcoef    #MCC metric liberaries import and calculated the MCC percentage
print("Mathew correlation : ",matthews_corrcoef(y_test, y_pred))

y_valid=clf.predict(valid_X)     #predict the original test data predictions
data_res=pd.DataFrame()  #make new datafrme
data_res['ID']=test_ID  #put ID columns into the datafrme
data_res['Label']=y_valid    #put predicted labels into the datafrme
#writing the dataframe on csv file
data_res.to_csv (r'MLP.csv', index = False,header=True)      #write into the file

data_res.to_csv(output5,index=False)     #output file









