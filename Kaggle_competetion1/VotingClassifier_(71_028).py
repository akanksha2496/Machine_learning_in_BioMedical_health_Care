# -*- coding: utf-8 -*-
"""MLBA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11jZ_Vyt-M1pbuIGktrywW00tBvPIRMgj

TEAM MEMBERS:-

Priyanka Boral(MT19127)


Reecha Kumari Giri(MT19134)


Akanksha Dewangan(MT19049)
"""

#loading of test train data of amino acid+dipeptide
#label encoding of target column
import pandas as pd
df_train = pd.read_csv('Merged_Train_Data.csv')
df_test = pd.read_csv('Merged_Test_Data.csv')
del df_train['ID.1']
test_labels=df_test['ID.1']
del df_test['ID.1']
from sklearn import preprocessing  
#label encoding
label_encoder = preprocessing.LabelEncoder() 
df_train['Type']= label_encoder.fit_transform(df_train['Type'])
label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
#print(label_mapping)
X = df_train.iloc[:,:-1]
y = df_train['Type']

"""Feature selection - select k-best is applied  

Mode used-SVM classifier
"""

#score73.64
from sklearn.feature_selection import SelectKBest,f_classif
#feature selection
sel_f = SelectKBest(score_func=f_classif, k=215)
X_new = sel_f.fit_transform(X, y)
X_new_test=sel_f.transform(df_test)
#print(sel_f.get_support())
from sklearn import svm
svc_f = svm.SVC(kernel='rbf', C=3, gamma='scale',class_weight='balanced')
from sklearn.model_selection import train_test_split,KFold,cross_val_score
kfold = KFold(n_splits=5,shuffle=True)
#cross validation
results = cross_val_score(svc_f, X_new, y, cv=kfold)
print(results.mean())
svc_f.fit(X_new, y)
# y_pred=svc.predict(X_new_test)
# y_pred_temp_rf=[]
# for i in y_pred:
#    if i==0:
#      y_pred_temp_rf.append(1)
#    else:
#      y_pred_temp_rf.append(-1)
#  #copying to sample file
# data_res=pd.DataFrame()
# data_res['ID']=test_labels
# data_res['Lable']=y_pred_temp_rf
# data_res.to_csv (r'merged_featureselection_svm.csv', index = False,header=True)

"""Model- SVM classifier"""

#71.08
from sklearn import svm
svc = svm.SVC(kernel='rbf', C=3, gamma='auto')
from sklearn.model_selection import train_test_split,KFold,cross_val_score
kfold = KFold(n_splits=5,shuffle=True)
results = cross_val_score(svc, X, y, cv=kfold)
print(results.mean())
svc.fit(X, y)
# y_pred=svc.predict(df_test)
# y_pred_temp_rf=[]
# for i in y_pred:
#   if i==0:
#     y_pred_temp_rf.append(1)
#   else:
#     y_pred_temp_rf.append(-1)
# #copying to sample file
# data_res=pd.DataFrame()
# data_res['ID']=test_labels
# data_res['Lable']=y_pred_temp_rf
# data_res.to_csv (r'merged_svm.csv', index = False,header=True)

"""Loading of amino acid data along with label encoding of target class.

Model used- ExtraTree Classifier
"""

import pandas as pd
df_train = pd.read_csv('Amino_acid_Train.csv')
df_test = pd.read_csv('Amino_acid_Test.csv')
del df_train['ID']
test_labels=df_test['ID']
del df_test['ID']
from sklearn import preprocessing  
label_encoder = preprocessing.LabelEncoder() 
df_train['Type']= label_encoder.fit_transform(df_train['Type'])
label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
#print(label_mapping)
X_train = df_train.iloc[:,:-1]
y_train = df_train['Type']
seed = 7
num_trees = 120
max_features = 7
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split,KFold,cross_val_score
kfold = KFold(n_splits=5, shuffle=True)
model1 = ExtraTreesClassifier(n_estimators=num_trees, criterion='gini',min_samples_split=2, max_features=max_features, min_samples_leaf=1, min_weight_fraction_leaf=0, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, bootstrap=False, oob_score=False, n_jobs=-1, random_state=False, verbose=0, warm_start=False, class_weight=None, ccp_alpha=0, max_samples=None)
results = cross_val_score(model1, X_train, y_train, cv=kfold)
print(results.mean())
model1.fit(X_train,y_train)

"""Loading of dipeptide data along with label encoding of target class.

Model used- SVM Classifier

feature selection- select k-best
"""

import pandas as pd
df_train_dipep = pd.read_csv('Dipeptide_Train.csv')
df_test_dipep = pd.read_csv('Dipeptide_Test.csv')
X = pd.read_pickle('dipeptide_matrix')
new_test=pd.read_pickle('dipeptide_test_matrix')
del df_train_dipep['ID'] 
test_labels=df_test_dipep['ID']
del df_test_dipep['ID']
from sklearn import preprocessing  
label_encoder = preprocessing.LabelEncoder() 
df_train_dipep['Type']= label_encoder.fit_transform(df_train_dipep['Type']) 
label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
y = df_train_dipep['Type']
from sklearn.feature_selection import SelectKBest,f_classif
sel_f = SelectKBest(score_func=f_classif, k=215)
X_new = sel_f.fit_transform(X, y)
#X_new_test=sel_f.transform(new_test)
from sklearn import svm
svc1 = svm.SVC(kernel='rbf', C=3,gamma='scale', class_weight='balanced').fit(X_new, y)
from sklearn.model_selection import cross_val_score
scores = cross_val_score(svc1, X_new, y, cv=10)
#use this for svm
print(sum(scores)/len(scores))

"""Data is merged of Dipeptide and amino acid data set.

model used- Voting classifier(('svm_feature', svc_f), ('svm', svc),('Extra tree Classifier',model1),('svm over amino_acid',svc1))
"""

df_train = pd.read_csv('Merged_Train_Data.csv')
df_test = pd.read_csv('Merged_Test_Data.csv')
del df_train['ID.1']
test_labels=df_test['ID.1']
del df_test['ID.1']
from sklearn import preprocessing  
label_encoder = preprocessing.LabelEncoder() 
df_train['Type']= label_encoder.fit_transform(df_train['Type'])
label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
#print(label_mapping)
X = df_train.iloc[:,:-1]
y = df_train['Type']
from sklearn.ensemble import VotingClassifier
from sklearn.model_selection import train_test_split,KFold,cross_val_score
eclf1 = VotingClassifier(estimators=[
      ('svm_feature', svc_f), ('svm', svc),('ETC',model1),('amino_acid',svc1)], voting='hard',n_jobs=10)
kfold = KFold(n_splits=5, shuffle=True)
eclf1 = eclf1.fit(X, y)
results = cross_val_score(eclf1, X, y, cv=kfold)
y_pred=eclf1.predict(df_test)
results.mean()

"""Label encoding of predicted column 

target csv are generated from here
"""

eclf1.fit(X, y)
y_pred=eclf1.predict(df_test)
y_pred_temp_rf=[]
for i in y_pred:
  if i==0:
    y_pred_temp_rf.append(1)
  else:
    y_pred_temp_rf.append(-1)
#copying to sample file
data_res=pd.DataFrame()
data_res['ID']=test_labels
data_res['Lable']=y_pred_temp_rf
data_res.to_csv (r'voting.csv', index = False,header=True)